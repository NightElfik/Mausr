@model TrainDetailsViewModel
@{
	var settings = Model.TrainSettings;

	ViewBag.Title = "Details of network " + settings.NetName;
	MyHtml.RequireScript(Links.Scripts.jquery_signalR_2_1_2_js);
	MyHtml.RequireScript("/SignalR/hubs");
	MyHtml.RequireScript(Links.Scripts.Mausr_trainer_js);
}

<h1>@ViewBag.Title</h1>

<h3>Train parameters</h3>

@Html.ActionLink("Edit train parameters", MVC.Train.NetSettings(Model.TrainSettings.NetId))

<div class="row">
	<div class="col-sm-4">
		<dl class="dl-horizontal">
			<dt>@Html.DisplayNameFor(m => settings.NetId)</dt>
			<dd>@Html.DisplayFor(m => settings.NetId)</dd>

			<dt>@Html.DisplayNameFor(m => settings.NetName)</dt>
			<dd>@Html.DisplayFor(m => settings.NetName)</dd>

			<dt>@Html.DisplayNameFor(m => settings.HiddenLayersSizes)</dt>
			<dd>@string.Join(", ", settings.HiddenLayersSizes.Select(x => x.ToString()))</dd>

			<dt>@Html.DisplayNameFor(m => settings.TrainEvaluationIters)</dt>
			<dd>@Html.DisplayFor(m => settings.TrainEvaluationIters)</dd>

			<dt>@Html.DisplayNameFor(m => settings.SkipFrstIters)</dt>
			<dd>@Html.DisplayFor(m => settings.SkipFrstIters)</dd>

			<dt>@Html.DisplayNameFor(m => settings.InputImgSizePx) px</dt>
			<dd>@Html.DisplayFor(m => settings.InputImgSizePx)</dd>

			<dt>@Html.DisplayNameFor(m => settings.PenThicknessPerc)</dt>
			<dd>@Html.DisplayFor(m => settings.PenThicknessPerc)</dd>

			<dt>@Html.DisplayNameFor(m => settings.NormalizeInput)</dt>
			<dd>@Html.DisplayFor(m => settings.NormalizeInput)</dd>

			<dt>@Html.DisplayNameFor(m => settings.GenerateExtraInputsByRotation)</dt>
			<dd>@Html.DisplayFor(m => settings.GenerateExtraInputsByRotation)</dd>
		</dl>
	</div>
	<div class="col-sm-4">
		<dl class="dl-horizontal">
			<dt>@Html.DisplayNameFor(m => settings.TestDataSetSizePerc)</dt>
			<dd>@Html.DisplayFor(m => settings.TestDataSetSizePerc) %</dd>

			<dt>@Html.DisplayNameFor(m => settings.LearnRounds)</dt>
			<dd>@Html.DisplayFor(m => settings.LearnRounds)</dd>

			<dt>@Html.DisplayNameFor(m => settings.BatchSize)</dt>
			<dd>@Html.DisplayFor(m => settings.BatchSize)</dd>

			<dt>@Html.DisplayNameFor(m => settings.MaxIteratinosPerBatch)</dt>
			<dd>@Html.DisplayFor(m => settings.MaxIteratinosPerBatch)</dd>

			<dt>@Html.DisplayNameFor(m => settings.MinDerivCompMaxMagn)</dt>
			<dd>@Html.DisplayFor(m => settings.MinDerivCompMaxMagn)</dd>

			<dt>@Html.DisplayNameFor(m => settings.RegularizationLambda)</dt>
			<dd>@Html.DisplayFor(m => settings.RegularizationLambda)</dd>

			<dt>@Html.DisplayNameFor(m => settings.OptimizationAlgorithm)</dt>
			<dd>@Html.DisplayFor(m => settings.OptimizationAlgorithm)</dd>

			<dt>@Html.DisplayNameFor(m => settings.InitSeed)</dt>
			<dd>@Html.DisplayFor(m => settings.InitSeed)</dd>
		</dl>
	</div>
	<div class="col-sm-4">
		<dl class="dl-horizontal">
			<dt>@Html.DisplayNameFor(m => settings.LearningRate)</dt>
			<dd>@Html.DisplayFor(m => settings.LearningRate)</dd>

			<dt>@Html.DisplayNameFor(m => settings.MomentumStartPerc)</dt>
			<dd>@Html.DisplayFor(m => settings.MomentumStartPerc) %</dd>

			<dt>@Html.DisplayNameFor(m => settings.MomentumEndPerc)</dt>
			<dd>@Html.DisplayFor(m => settings.MomentumEndPerc) %</dd>

			<dt>@Html.DisplayNameFor(m => settings.RpropInitStep)</dt>
			<dd>@Html.DisplayFor(m => settings.RpropInitStep)</dd>

			<dt>@Html.DisplayNameFor(m => settings.RpropMaxStep)</dt>
			<dd>@Html.DisplayFor(m => settings.RpropMaxStep)</dd>

			<dt>@Html.DisplayNameFor(m => settings.RpropStepUpMult)</dt>
			<dd>@Html.DisplayFor(m => settings.RpropStepUpMult)</dd>

			<dt>@Html.DisplayNameFor(m => settings.RpropStepDownMult)</dt>
			<dd>@Html.DisplayFor(m => settings.RpropStepDownMult)</dd>
		</dl>
	</div>
</div>

<div class="row">
	<div class="col-md-12">
		<a href="#" id="startBtn" class="btn btn-primary">Start training</a>
		<a href="#" id="stopBtn" class="btn btn-default">Stop training and save results</a>
		<a href="#" id="cancelBtn" class="btn btn-danger">Cancel training</a>
		<a href="#" id="setAsDefaultBtn" class="btn btn-success">Set as default network for the main page</a>
		<span class="label" id="startStopLabel"></span>
	</div>
</div>


<h3>Training data</h3>

<div class="row">
	<div class="col-md-6"><div id="chartCost"></div></div>
	<div class="col-md-6"><div id="chartPredict"></div></div>
</div>

<div id="msgsContainer" class="well">

</div>

<div class="row">
	@Html.ActionLink("Delete network", MVC.Train.DeleteNet(Model.TrainSettings.NetId), new { @class = "btn btn-default" })
</div>

@section scripts {
	<script type="text/javascript" src="https://www.google.com/jsapi?autoload={'modules':[{'name':'visualization','version':'1','packages':['corechart']}]}"></script>
	<script>
		$(function () {

			var trainData = @Html.Raw(Json.Encode(Model.TrainData));

			new MausrTrainer({
				netId: '@settings.NetId',
				msgsContainerId: 'msgsContainer',
				costChartId: 'chartCost',
				predictChartId: 'chartPredict',
				startUrl: '@Url.Action(MVC.Train.StartTraining())',
				startBtnId: 'startBtn',
				startLabelId: 'startStopLabel',
				stopUrl: '@Url.Action(MVC.Train.StopTraining())',
				stopBtnId: 'stopBtn',
				cancelBtnId: 'cancelBtn',
				setAsDefaultUrl: '@Url.Action(MVC.Train.SetDefault())',
				setAsDefaultBtnId: 'setAsDefaultBtn',
				trainData: trainData
			});
		});
	</script>
}