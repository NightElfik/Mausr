@model TrainViewModel
@{
	ViewBag.Title = "Train neural network";
}

<h1>@ViewBag.Title</h1>

@using (Html.BeginForm()) {
	@Html.AntiForgeryToken()

	<div class="form-horizontal">
		@Html.ValidationSummary(true, "", new { @class = "text-danger" })
		<hr />
		<h4>Basic info and topology</h4>
		<div class="form-group">
			@Html.LabelFor(model => model.NetName, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				@Html.EditorFor(model => model.NetName, new { htmlAttributes = new { @class = "form-control", placeholder = "My network 400-100-97" } })
				@Html.ValidationMessageFor(model => model.NetName, "", new { @class = "text-danger" })
				<p class="text-muted"><small>Human readable network name for identification later on.</small></p>
			</div>
		</div>
		<div class="form-group">
			<label class="col-sm-3 control-label">Input layer size</label>
			<div class="col-md-3">
				<p class="form-control-static">Given my a square of input image size.</p>
			</div>
		</div>
		<div class="form-group">
			@Html.LabelFor(model => model.HiddenLayersSizes, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				@Html.EditorFor(model => model.HiddenLayersSizes, new { htmlAttributes = new { @class = "form-control", placeholder = "100; 20" } })
				@Html.ValidationMessageFor(model => model.HiddenLayersSizes, "", new { @class = "text-danger" })
				<p class="text-muted"><small>Sizes of hidden layers separated by space, comma, or semicolon.</small></p>
			</div>
		</div>
		<div class="form-group">
			<label class="col-sm-3 control-label">Output layer size</label>
			<div class="col-md-3">
				<p class="form-control-static">@Model.OutputSize</p>
				<p class="text-muted"><small>Number of output neurons is given by number of symbols in DB.</small></p>
			</div>
		</div>


		<hr />
		<h4>Input image parameters</h4>

		<div class="form-group">
			@Html.LabelFor(model => model.InputImgSizePx, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				<div class="input-group">
					@Html.EditorFor(model => model.InputImgSizePx, new { htmlAttributes = new { @class = "form-control" } })
					<div class="input-group-addon">px</div>
				</div>
				@Html.ValidationMessageFor(model => model.InputImgSizePx, "", new { @class = "text-danger" })
				<p class="text-muted"><small>A square of this number is size of input layer on the neuron network.</small></p>
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.PenThicknessPerc, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				<div class="input-group">
					@Html.EditorFor(model => model.PenThicknessPerc, new { htmlAttributes = new { @class = "form-control" } })
					<div class="input-group-addon">%</div>
				</div>
				@Html.ValidationMessageFor(model => model.PenThicknessPerc, "", new { @class = "text-danger" })
				<p class="text-muted"><small>Thickness of a pen used for drawing the symbols as percentage of image edge size.</small></p>
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.GenerateExtraInputsByRotation, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				<div class="input-group">
					<div class="input-group-addon">±</div>
					@Html.EditorFor(model => model.GenerateExtraInputsByRotation, new { htmlAttributes = new { @class = "form-control" } })
					<div class="input-group-addon">°</div>
				</div>
				@Html.ValidationMessageFor(model => model.GenerateExtraInputsByRotation, "", new { @class = "text-danger" })
				<p class="text-muted"><small>In non-zero, generates extra artifical inputs by rotating existing ones by given amount of degrees. This triples the input count.</small></p>
			</div>
		</div>

		<hr />
		<h4>Training parameters</h4>

		<div class="form-group">
			<label class="col-sm-3 control-label">Training samples count</label>
			<div class="col-md-3">
				<p class="form-control-static">@Model.TrainingSamples</p>
				<p class="text-muted"><small>Number of training samples currently in the DB.</small></p>
			</div>
		</div>
		<div class="form-group">
			@Html.LabelFor(model => model.TestDataSetSizePerc, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				<div class="input-group">
					@Html.EditorFor(model => model.TestDataSetSizePerc, new { htmlAttributes = new { @class = "form-control" } })
					<div class="input-group-addon">%</div>
				</div>
				@Html.ValidationMessageFor(model => model.TestDataSetSizePerc, "", new { @class = "text-danger" })
				<p class="text-muted"><small>Percentage of training samples that will be used for performance evaluation.</small></p>
			</div>
		</div>
		<div class="form-group">
			@Html.LabelFor(model => model.LearnRounds, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				@Html.EditorFor(model => model.LearnRounds, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.LearnRounds, "", new { @class = "text-danger" })
				<p class="text-muted"><small>Number of rounds of learning. All input samples are processed in one round.</small></p>
			</div>
		</div>
		<div class="form-group">
			@Html.LabelFor(model => model.BatchSize, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				@Html.EditorFor(model => model.BatchSize, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.BatchSize, "", new { @class = "text-danger" })
				<p class="text-muted"><small>Number of samples in a batch. There will be as many batches as nedded in every learning round.</small></p>
			</div>
			@Html.LabelFor(model => model.MaxIteratinosPerBatch, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				@Html.EditorFor(model => model.MaxIteratinosPerBatch, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.MaxIteratinosPerBatch, "", new { @class = "text-danger" })
				<p class="text-muted"><small>Maximal number of iterations of optimization algorithm per batch.</small></p>
			</div>
		</div>
		<div class="form-group">
			@Html.LabelFor(model => model.LearningRate, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				@Html.EditorFor(model => model.LearningRate, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.LearningRate, "", new { @class = "text-danger" })
				<p class="text-muted"><small>Step multiplier for gradient descent algorithm.</small></p>
			</div>
			@Html.LabelFor(model => model.RegularizationLambda, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				@Html.EditorFor(model => model.RegularizationLambda, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.RegularizationLambda, "", new { @class = "text-danger" })
				<p class="text-muted"><small>Regularization parameter often called λ that helps to prevent overfitting.</small></p>
			</div>
		</div>
		<div class="form-group">
			@Html.LabelFor(model => model.MomentumStartPerc, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				<div class="input-group">
					@Html.EditorFor(model => model.MomentumStartPerc, new { htmlAttributes = new { @class = "form-control" } })
					<div class="input-group-addon">%</div>
				</div>
				@Html.ValidationMessageFor(model => model.MomentumStartPerc, "", new { @class = "text-danger" })
				<p class="text-muted"><small>Momentum at the start of the optimization algorithm.</small></p>
			</div>
			@Html.LabelFor(model => model.MomentumEndPerc, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				<div class="input-group">
					@Html.EditorFor(model => model.MomentumEndPerc, new { htmlAttributes = new { @class = "form-control" } })
					<div class="input-group-addon">%</div>
				</div>
				@Html.ValidationMessageFor(model => model.MomentumEndPerc, "", new { @class = "text-danger" })
				<p class="text-muted"><small>Momentum at the end of the optimization algorithm run (given by max iterations).</small></p>
			</div>
		</div>
		<div class="form-group">
			@Html.LabelFor(model => model.MinDerivativeMagnitude, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				@Html.EditorFor(model => model.MinDerivativeMagnitude, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.MinDerivativeMagnitude, "", new { @class = "text-danger" })
				<p class="text-muted"><small>Minimum derivative magnitude before terminating the optimization batch.</small></p>
			</div>
		</div>



		<div class="form-group">
			<div class="col-md-offset-3 col-md-3">
				<input type="submit" value="Train" class="btn btn-primary btn-lg btn-block" />
			</div>
		</div>
	</div>
}
