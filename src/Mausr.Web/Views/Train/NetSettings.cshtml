@model TrainViewModel
@{
	ViewBag.Title = "Train neural network";
}

<h1>@ViewBag.Title</h1>

@using (Html.BeginForm()) {
	@Html.AntiForgeryToken()

	<div class="form-horizontal">
		@Html.ValidationSummary(true, "", new { @class = "text-danger" })
		<hr />
		<h4>Basic info and topology</h4>
		<div class="form-group">
			@Html.LabelFor(m => m.NetName, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				@Html.EditorFor(m => m.NetName, new { htmlAttributes = new { @class = "form-control", placeholder = "My network 3" } })
				@Html.ValidationMessageFor(m => m.NetName, "", new { @class = "text-danger" })
				<p class="text-muted"><small>Human readable network name for identification later on.</small></p>
			</div>
		</div>
		<div class="form-group">
			<label class="col-sm-3 control-label">Input layer size</label>
			<div class="col-md-3">
				<p class="form-control-static">Given my a square of input image size.</p>
			</div>
		</div>
		<div class="form-group">
			@Html.LabelFor(m => m.HiddenLayersSizesStr, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				@Html.EditorFor(m => m.HiddenLayersSizesStr, new { htmlAttributes = new { @class = "form-control", placeholder = "100; 20" } })
				@Html.ValidationMessageFor(m => m.HiddenLayersSizesStr, "", new { @class = "text-danger" })
				<p class="text-muted"><small>Sizes of hidden layers separated by space, comma, or semicolon.</small></p>
			</div>
		</div>
		<div class="form-group">
			<label class="col-sm-3 control-label">Output layer size</label>
			<div class="col-md-3">
				<p class="form-control-static">@Model.OutputSize</p>
				<p class="text-muted"><small>Number of output neurons is given by the number of symbols in DB.</small></p>
			</div>
		</div>
		<div class="form-group">
			@Html.LabelFor(m => m.TrainEvaluationIters, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				@Html.EditorFor(m => m.TrainEvaluationIters, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(m => m.TrainEvaluationIters, "", new { @class = "text-danger" })
				<p class="text-muted"><small>Interval of evaluation of network performacne (in iterations).</small></p>
			</div>
			@Html.LabelFor(m => m.SkipFrstIters, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				@Html.EditorFor(m => m.SkipFrstIters, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(m => m.SkipFrstIters, "", new { @class = "text-danger" })
				<p class="text-muted"><small>Skips first few iterations to avoid recording high errors that skwews graph scales.</small></p>
			</div>
		</div>


		<hr />
		<h4>Input image parameters</h4>

		<div class="form-group">
			@Html.LabelFor(m => m.InputImgSizePx, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				<div class="input-group">
					@Html.EditorFor(m => m.InputImgSizePx, new { htmlAttributes = new { @class = "form-control" } })
					<div class="input-group-addon">px</div>
				</div>
				@Html.ValidationMessageFor(m => m.InputImgSizePx, "", new { @class = "text-danger" })
				<p class="text-muted"><small>A square of this number is the size of input layer on the neural network.</small></p>
			</div>
			@Html.LabelFor(m => m.PenThicknessPerc, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				<div class="input-group">
					@Html.EditorFor(m => m.PenThicknessPerc, new { htmlAttributes = new { @class = "form-control" } })
					<div class="input-group-addon">%</div>
				</div>
				@Html.ValidationMessageFor(m => m.PenThicknessPerc, "", new { @class = "text-danger" })
				<p class="text-muted"><small>Thickness of a pen used for drawing the symbols as percentage of image edge size.</small></p>
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(m => m.NormalizeInput, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				@Html.EditorFor(m => m.NormalizeInput, new { htmlAttributes = new { @class = "checkbox" } })
				@Html.ValidationMessageFor(m => m.NormalizeInput, "", new { @class = "text-danger" })
				<p class="text-muted"><small>Crops and centers input data.</small></p>
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(m => m.GenerateExtraInputsByRotation, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				<div class="input-group">
					<div class="input-group-addon">±</div>
					@Html.EditorFor(m => m.GenerateExtraInputsByRotation, new { htmlAttributes = new { @class = "form-control" } })
					<div class="input-group-addon">°</div>
				</div>
				@Html.ValidationMessageFor(m => m.GenerateExtraInputsByRotation, "", new { @class = "text-danger" })
				<p class="text-muted"><small>If non-zero, generates extra artifical inputs by rotating existing ones by given amount of degrees. This triples the input count.</small></p>
			</div>
		</div>

		<div class="form-group">
			<div class="col-md-3">
				<a class="btn btn-default pull-right" id="genSampleImagesBtn" href="#" role="button">Show sample images</a>
			</div>
			<div class="col-md-9" id="sampleImagesContainer"></div>
		</div>


		<hr />
		<h4>Training parameters</h4>

		<div class="form-group">
			<label class="col-sm-3 control-label">Training samples count</label>
			<div class="col-md-3">
				<p class="form-control-static">@Model.TrainingSamples</p>
				<p class="text-muted"><small>Number of training samples currently in the DB.</small></p>
			</div>
		</div>
		<div class="form-group">
			@Html.LabelFor(m => m.InitSeed, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				@Html.EditorFor(m => m.InitSeed, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(m => m.InitSeed, "", new { @class = "text-danger" })
				<p class="text-muted"><small>Initialization seed for pseudo random generator.</small></p>
			</div>
		</div>
		<div class="form-group">
			@Html.LabelFor(m => m.TestDataSetSizePerc, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				<div class="input-group">
					@Html.EditorFor(m => m.TestDataSetSizePerc, new { htmlAttributes = new { @class = "form-control" } })
					<div class="input-group-addon">%</div>
				</div>
				@Html.ValidationMessageFor(m => m.TestDataSetSizePerc, "", new { @class = "text-danger" })
				<p class="text-muted"><small>Percentage of training samples that will be used for performance evaluation.</small></p>
			</div>
		</div>
		<div class="form-group">
			@Html.LabelFor(m => m.LearnRounds, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				@Html.EditorFor(m => m.LearnRounds, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(m => m.LearnRounds, "", new { @class = "text-danger" })
				<p class="text-muted"><small>Number of rounds of learning. All input samples are processed in one round.</small></p>
			</div>
		</div>
		<div class="form-group">
			@Html.LabelFor(m => m.BatchSize, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				@Html.EditorFor(m => m.BatchSize, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(m => m.BatchSize, "", new { @class = "text-danger" })
				<p class="text-muted">
					<small>
						Number of samples in a batch.
						There will be as many batches as nedded in every learning round.
						Batch size 0 denotes one batch per round.
					</small>
				</p>
			</div>
			@Html.LabelFor(m => m.MaxIteratinosPerBatch, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				@Html.EditorFor(m => m.MaxIteratinosPerBatch, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(m => m.MaxIteratinosPerBatch, "", new { @class = "text-danger" })
				<p class="text-muted"><small>Maximal number of iterations of optimization algorithm per batch.</small></p>
			</div>
		</div>
		<div class="form-group">
			@Html.LabelFor(m => m.OptimizationAlgorithm, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				@Html.EnumDropDownListFor(m => m.OptimizationAlgorithm, new { @class = "form-control" })
				@Html.ValidationMessageFor(m => m.OptimizationAlgorithm, "", new { @class = "text-danger" })
				<p class="text-muted"><small>Algorithm used for the optimization.</small></p>
			</div>
		</div>
		<div class="form-group">
			@Html.LabelFor(m => m.MinDerivCompMaxMagn, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				@Html.EditorFor(m => m.MinDerivCompMaxMagn, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(m => m.MinDerivCompMaxMagn, "", new { @class = "text-danger" })
				<p class="text-muted"><small>Minimum derivative magnitude before terminating the optimization batch.</small></p>
			</div>
		</div>

		<h4>Gradient descent based optimizers</h4>
		<div class="form-group">
			@Html.LabelFor(m => m.LearningRate, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				@Html.EditorFor(m => m.LearningRate, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(m => m.LearningRate, "", new { @class = "text-danger" })
				<p class="text-muted"><small>Step multiplier for gradient descent algorithm.</small></p>
			</div>
			@Html.LabelFor(m => m.RegularizationLambda, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				@Html.EditorFor(m => m.RegularizationLambda, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(m => m.RegularizationLambda, "", new { @class = "text-danger" })
				<p class="text-muted"><small>Regularization parameter often called λ that helps to prevent overfitting.</small></p>
			</div>
		</div>
		<div class="form-group">
			@Html.LabelFor(m => m.MomentumStartPerc, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				<div class="input-group">
					@Html.EditorFor(m => m.MomentumStartPerc, new { htmlAttributes = new { @class = "form-control" } })
					<div class="input-group-addon">%</div>
				</div>
				@Html.ValidationMessageFor(m => m.MomentumStartPerc, "", new { @class = "text-danger" })
				<p class="text-muted"><small>Momentum at the start of the optimization algorithm.</small></p>
			</div>
			@Html.LabelFor(m => m.MomentumEndPerc, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				<div class="input-group">
					@Html.EditorFor(m => m.MomentumEndPerc, new { htmlAttributes = new { @class = "form-control" } })
					<div class="input-group-addon">%</div>
				</div>
				@Html.ValidationMessageFor(m => m.MomentumEndPerc, "", new { @class = "text-danger" })
				<p class="text-muted"><small>Momentum at the end of the optimization algorithm run (given by max iterations).</small></p>
			</div>
		</div>

		<h4>RProp based optimizers</h4>
		<div class="form-group">
			@Html.LabelFor(m => m.RpropInitStep, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				@Html.EditorFor(m => m.RpropInitStep, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(m => m.RpropInitStep, "", new { @class = "text-danger" })
				<p class="text-muted"><small>Initial step of RProp algorithm (not significant).</small></p>
			</div>
			@Html.LabelFor(m => m.RpropMaxStep, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				@Html.EditorFor(m => m.RpropMaxStep, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(m => m.RpropMaxStep, "", new { @class = "text-danger" })
				<p class="text-muted"><small>Maximal step of RProp algorithm.</small></p>
			</div>
		</div>
		<div class="form-group">
			@Html.LabelFor(m => m.RpropStepUpMult, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				@Html.EditorFor(m => m.RpropStepUpMult, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(m => m.RpropStepUpMult, "", new { @class = "text-danger" })
				<p class="text-muted"><small>Step increase multiplier. Has to be greater than 1.</small></p>
			</div>
			@Html.LabelFor(m => m.RpropStepDownMult, htmlAttributes: new { @class = "control-label col-md-3" })
			<div class="col-md-3">
				@Html.EditorFor(m => m.RpropStepDownMult, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(m => m.RpropStepDownMult, "", new { @class = "text-danger" })
				<p class="text-muted"><small>Step decrease multiplier. Has to be between 0 and 1.</small></p>
			</div>
		</div>

		<div class="form-group">
			<div class="col-md-offset-3 col-md-3">
				<input type="submit" value="Save settings" class="btn btn-primary btn-lg btn-block" />
			</div>
		</div>
	</div>
}

@section scripts {

	<script>
		$(function () {
			var imgUrls = [
				@Html.Raw(string.Join(",", Model.ExampleDrawings.Select(d =>
					"'" + Url.Action(MVC.SymbolDrawings.Img(d.SymbolDrawingId, 88, 22, 0, true, false)) + "'")))
			];
			var $imgSizeInput = $('#@Html.NameFor(m => m.InputImgSizePx)');
			var $penSizeInput = $('#@Html.NameFor(m => m.PenThicknessPerc)');
			var $extraRotationInput = $('#@Html.NameFor(m => m.GenerateExtraInputsByRotation)');
			var $normalizedInput = $('#@Html.NameFor(m => m.NormalizeInput)');
			var $container = $('#sampleImagesContainer');
			$('#genSampleImagesBtn').click(function (e) {
				$container.html("");
				for (var i = 0; i < imgUrls.length; ++i) {
					var url = imgUrls[i].replace('/88/', '/' + $imgSizeInput.val() + '/')
						.replace('/22/', '/' + $penSizeInput.val() + '/')
						.replace('/True/', '/' + ($normalizedInput.prop('checked') ? 'True' : 'False') + '/');

					$container.append($('<img src="' + url + '" style="border: 1px solid #AAA; margin: 4px;" />'));

					var rotAngle = parseInt($extraRotationInput.val(), 10);
					if (rotAngle != 0) {
						$container.append($('<img src="' + url.replace('/0/', '/' + rotAngle + '/') + '" style="border: 1px solid #AAA; margin: 4px;" />'));
						$container.append($('<img src="' + url.replace('/0/', '/' + (-rotAngle) + '/') + '" style="border: 1px solid #AAA; margin: 4px;" />'));
					}
				}
				return false;
			});
		});
	</script>
}
